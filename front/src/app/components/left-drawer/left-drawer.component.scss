@use '../../../variables' as vars;

$dark-divider: rgb(0 0 0 / 80%);
$dark-gray: #151313;
$sm-gutter: 8px;
$accent-color: #4caf50;

.left-drawer {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  background-color: $dark-gray;
  color: #f0f0f0;
  border-right: 1px solid $dark-divider;
  transition: transform 0.3s ease;

  &.desktop {
    width: 280px;
    transform: translateX(0);
    box-shadow: 2px 0 5px rgba(0, 0, 0, 0.3);
    z-index: 100;
  }

  &.mobile {
    width: 100%;
    max-width: 350px;
    transform: translateX(-100%);
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.5);
    z-index: 1000;

    &.open {
      transform: translateX(0);
    }
  }

  .drawer-content {
    padding: 0;
    height: 100vh; // Ensure full viewport height
    display: flex;
    flex-direction: column;
    overflow: hidden; // Prevent the entire drawer from scrolling
    
    .player-section {
      position: relative;
      flex-shrink: 0;
      
      &.current-player {
        // Enhanced border for current player instead of green accent
        app-player-state-box {
          &::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 8px; // Thicker border
            background: inherit; // Will inherit the player color
            z-index: 1;
            opacity: 1;
          }
        }
        
        // Also add a subtle pulse animation for current player
        &::after {
          content: '';
          position: absolute;
          left: 0;
          top: 0;
          bottom: 0;
          width: 4px;
          background: rgba(255, 255, 255, 0.3);
          animation: pulse 2s infinite;
        }
      }
      
      // Add subtle hover effect
      &:hover {
        background-color: rgba(255, 255, 255, 0.02);
      }
    }
    
    .divider {
      background: $dark-divider;
      height: 1px;
      width: 100%;
      flex-shrink: 0;
    }
  }


}

// Add pulse animation for current player
@keyframes pulse {
  0% {
    opacity: 0.3;
  }
  50% {
    opacity: 0.7;
  }
  100% {
    opacity: 0.3;
  }
}

/* Responsive fallback styles - these are now primarily handled by class-based logic */
@media (min-width: 1200px) {
  .left-drawer.desktop {
    // Ensure desktop drawer is always visible
    transform: translateX(0) !important;
  }
}

@media (max-width: 1199px) {
  .left-drawer.mobile {
    // Ensure mobile drawer respects open/closed state
    &:not(.open) {
      transform: translateX(-100%) !important;
    }
  }
} 